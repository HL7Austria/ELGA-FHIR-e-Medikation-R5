name: UpdateBallotComments

on:
  discussion:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  discussions: read

jobs:
  update-comments:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub Pages site
        uses: actions/checkout@v4
        with:
          repository: HL7Austria/hl7austria.github.io
          ref: pages
          path: site

      - name: Set IG Subfolder name
        id: set_folder
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          echo "Detected branch: $BRANCH_NAME"
          echo "IG_FOLDER=r5-ELGA-e-medikation-$BRANCH_NAME" >> $GITHUB_ENV

      - name: Fetch Discussions
        working-directory: site/${{ env.IG_FOLDER }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p temp
          NEXT="null"
          echo '[]' > temp/discussions-all.json

          while [ "$NEXT" != "null" ]; do
            echo "Fetching discussions after cursor: $NEXT"
            if [ "$NEXT" = "null" ]; then
              RESPONSE=$(gh api graphql --repo HL7Austria/ELGA-FHIR-e-Medikation-R5 --field query='
                query {
                  repository(owner: "HL7Austria", name: "ELGA-FHIR-e-Medikation-R5") {
                    discussions(first: 100) {
                      pageInfo { endCursor hasNextPage }
                      nodes {
                        title
                        body
                        url
                        number
                        createdAt
                        category { name }
                      }
                    }
                  }
                }
              ')
            else
              RESPONSE=$(gh api graphql --repo HL7Austria/ELGA-FHIR-e-Medikation-R5 --field query='
                query ($cursor: String!) {
                  repository(owner: "HL7Austria", name: "ELGA-FHIR-e-Medikation-R5") {
                    discussions(first: 100, after: $cursor) {
                      pageInfo { endCursor hasNextPage }
                      nodes {
                        title
                        body
                        url
                        number
                        createdAt
                        category { name }
                      }
                    }
                  }
                }
              ' -f cursor="$NEXT")
            fi
        
            echo "Fetched response:"
            echo "$RESPONSE"
      
            echo "$RESPONSE" > temp/page.json
      
            jq '[ .[0][] , .[1].data.repository.discussions.nodes[]? ]' temp/discussions-all.json temp/page.json > temp/merged.json
            mv temp/merged.json temp/discussions-all.json
      
            NEXT=$(echo "$RESPONSE" | jq -r '.data.repository.discussions.pageInfo | if .hasNextPage then .endCursor else "null" end')
          done
        
          echo "Final fetched discussions:"
          cat temp/discussions-all.json
        
          
      - name: Show fetched discussions
        working-directory: site/${{ env.IG_FOLDER }}
        run: |
            cat temp/discussions-all.json || echo "No discussions-all.json found"

      - name: Generate comments.json
        working-directory: site/${{ env.IG_FOLDER }}
        shell: python
        run: |
          import os, json, base64
        
          os.makedirs('comments', exist_ok=True)
        
          with open('temp/discussions-all.json', 'r') as f:
            all_discussions = json.load(f)
        
          comments = []
          for d in all_discussions:
            if d.get('category', {}).get('name') != 'Comment':
                continue
            try:
                decoded = base64.b64decode(d['title']).decode('utf-8')
                parts = decoded.split('|')
                if len(parts) != 5:
                  continue
                comments.append({
                    'page': '/',
                    'startXPath': parts[1],
                    'startOffset': int(parts[2]),
                    'endXPath': parts[3],
                    'endOffset': int(parts[4]),
                    'url': d['url'],
                    'createdAt': d['createdAt'],
                    'number': d['number']
                 })
            except Exception:
              continue
        
          with open('comments/comments.json', 'w') as f:
            json.dump(comments, f, indent=2)
        
        

      - name: Commit and push updated comments.json
        working-directory: site
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -f comments/comments.json ]; then
            git add comments/comments.json
            git commit -m "Update comments.json from discussions event" || echo "No changes to commit"
            git push
          else
            echo "No comments.json generated. Skipping commit."
          fi